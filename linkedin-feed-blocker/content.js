// === Config ===
const LIMIT_MS = 0.25 * 60 * 1000; // 3 minutes
const POLL_MS = 1000;

// === Utils ===
const log = (...a) => console.log("[FeedBlocker]", ...a);

function replaceFeed() {
  log("Essai de remplacement du feed‚Ä¶");

  const feedSelectors = [
    "main",
    ".scaffold-finite-scroll__content",
    "[data-test-feed-update-list]"
  ];

  for (const selector of feedSelectors) {
    const feed = document.querySelector(selector);
    if (feed) {
      log(`Feed trouv√© avec le s√©lecteur '${selector}', remplacement‚Ä¶`);
      feed.innerHTML = `
        <div style="
          font-size:24px;
          text-align:center;
          margin-top:50px;
          color:#555;
        ">
          ‚è≥ Tes 3 minutes sont √©coul√©es. Ferme le feed et retourne √† tes t√¢ches ! üöÄ
        </div>
      `;
      return true;
    }
  }
  return false;
}

// Attend que le feed existe puis remplace
function blockWhenReady() {
  if (replaceFeed()) return;

  // Si pas encore l√†, observe le DOM jusqu'√† ce que le feed apparaisse
  const mo = new MutationObserver(() => {
    if (replaceFeed()) mo.disconnect();
  });
  mo.observe(document.documentElement, { childList: true, subtree: true });

  // S√©curit√©: arr√™ter l'observer apr√®s 10s pour √©viter les fuites
  setTimeout(() => mo.disconnect(), 10_000);
}

// D√©marre un compte √† rebours, le r√©initialise si on quitte le feed
let timerId = null;
let lastHref = location.href;

function startOrRestartTimer() {
  clearTimeout(timerId);
  log("D√©marrage du minuteur de 3 minutes‚Ä¶");
  timerId = setTimeout(() => {
    log("Minuteur termin√©, blocage du feed.");
    blockWhenReady();
  }, LIMIT_MS);
}

// Sur SPA, d√©tecter les changements d‚ÄôURL
setInterval(() => {
  if (location.href !== lastHref) {
    const wasFeed = /linkedin\.com\/.*feed/.test(lastHref);
    const isFeed = /linkedin\.com\/.*feed/.test(location.href);
    lastHref = location.href;

    if (isFeed) {
      log("Arriv√©e sur le feed -> (re)lancer le minuteur.");
      startOrRestartTimer();
    } else if (wasFeed) {
      log("Sortie du feed -> arr√™ter le minuteur.");
      clearTimeout(timerId);
    }
  }
}, POLL_MS);

// Lancer au chargement si on est d√©j√† sur le feed
if (/linkedin\.com\/.*feed/.test(location.href)) {
  startOrRestartTimer();
}

// Bonus: si l‚Äôonglet est masqu√© trop longtemps, on bloque √† la reprise
document.addEventListener("visibilitychange", () => {
  if (document.visibilityState === "visible" &&
      /linkedin\.com\/.*feed/.test(location.href)) {
  }
});
